{"version":3,"sources":["modules/objects/snake.js","modules/objects/food/apple.js","modules/objects/food/strawberry.js","modules/objects/food/mushroom.js","modules/objects/food/elixir.js","modules/objects/food.js","modules/objects/menu.js","modules/game.js","application.js"],"names":["define","elements","direction","size","_ID","_LEFT","_RIGHT","_UP","_DOWN","_APPLE","_STRAWBERRY","_MUSHROOM","_ELIXIR","cols","rows","tileSize","gameOver","pts","godMode","init","this","initElements","initEvents","getId","getElements","printItem","ctx","coords","fillStyle","fillRect","x","y","Math","floor","i","push","getElement","id","getLength","length","document","addEventListener","e","lock","Boolean","keyCode","bind","move","tail","shift","head","isOverboard","isBitten","increase","unshift","detectCollision","food","collision","collisionWith","obj","apples","console","log","indexOf","splice","img","Image","src","type","apple","strawberry","mushroom","elixir","params","num","generateFood","ID","getImage","images","drawImage","add","getFood","name","random","width","height","best","getBestScore","clearRect","font","textAlign","fillText","setBestScore","localStorage","getItem","setItem","snake","menu","container","canvas","_TILE_SIZE","_COLS","_ROWS","_APPLES","_ENTER","frame","boardInit","gameLoop","render","getElementById","innerHTML","createElement","appendChild","getContext","printGrid","beginPath","moveTo","lineWidth","lineTo","closePath","stroke","j","printPoints","snakeElements","concat","timer","setInterval","clearInterval","version","requirejs","config","urlArgs","game"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA,ADeA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA,ADeA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA,ADeA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA,ADyEA;ACxxJA,ADyJA;ACxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"application.js","sourcesContent":["(function() {\n  define(\"modules/objects/snake\", [], function() {\n    var size = 3,\n      _ID = 1,\n      /*controll keys*/\n      _LEFT = 37,\n      _RIGHT = 39,\n      _UP = 38,\n      _DOWN = 40,\n      /*food*/\n      _APPLE = 2,\n      _STRAWBERRY = 3,\n      _MUSHROOM = 4,\n      _ELIXIR = 5,\n      /*snake elements*/\n      elements, direction;\n\n    return {\n      cols: 0,\n      rows: 0,\n      tileSize: 0,\n      gameOver: false,\n      pts: 0,\n      godMode: true,\n\n      /**\n       * Snake initialize function\n       */\n      init: function(cols, rows, tileSize) {\n        this.gameOver = false;\n        this.godMode = false;\n        direction = _RIGHT;\n        elements = [];\n        this.pts = 0;\n        this.cols = cols,\n        this.rows = rows,\n        this.tileSize = tileSize,\n\n        this.initElements(cols, rows);\n        this.initEvents();\n      },\n\n      getId: function() {\n        return _ID;\n      },\n\n      /**\n       * Returns a collection of elements with snake coordinates\n       * @return {Array} - collection with coordinates\n       */\n      getElements: function() {\n        return elements;\n      },\n\n      /**\n       * Prints one cell styled for snake object\n       */\n      printItem: function(ctx, coords) {\n        ctx.fillStyle = this.godMode ? \"blue\" : \"green\";\n        ctx.fillRect(coords.x*this.tileSize, coords.y*this.tileSize, this.tileSize, this.tileSize);\n      },\n\n      /**\n       * Initialize snake elements\n       */\n      initElements: function(cols, rows) {\n        var x = Math.floor(cols/2),\n          y = Math.floor(rows/2);\n\n        for(var i = 0; i < size; i++) {\n          elements.push(this.getElement(x+i, y));\n        }\n      },\n\n      /**\n       * Creates a new element for a snake cell\n       * @return {Object} - snake cell\n       */\n      getElement: function(x, y) {\n        return {\n          x: x,\n          y: y,\n          id: _ID\n        }\n      },\n\n      getLength: function() {\n        return elements.length;\n      },\n\n      /**\n       * Event handlers\n       * @listens keyup\n       */\n      initEvents: function() {\n        document.addEventListener(\"keyup\", function(e) {\n          if(this.lock) return;\n          switch(true) {\n            case Boolean(e.keyCode === _UP && direction !== _DOWN):\n            case Boolean(e.keyCode === _DOWN && direction !== _UP):\n            case Boolean(e.keyCode === _LEFT && direction !== _RIGHT):\n            case Boolean(e.keyCode === _RIGHT && direction !== _LEFT):\n              this.lock = true;\n              direction = e.keyCode;\n          }\n        }.bind(this));\n      },\n\n      /**\n       * Moves snake\n       */\n      move: function() {\n        var tail = elements.shift(),\n          head = elements[elements.length-1];\n\n        switch(direction) {\n          case _UP:\n            tail.y = head.y-1;\n            tail.x = head.x;\n            break;\n          case _DOWN:\n            tail.y = head.y+1;\n            tail.x = head.x;\n            break;\n          case _LEFT:\n            tail.y = head.y;\n            tail.x = head.x-1;\n            break;\n          case _RIGHT:\n            tail.y = head.y;\n            tail.x = head.x+1;\n            break;\n        }\n\n        this.gameOver = this.isOverboard(tail) || this.isBitten(tail);\n        this.lock = false;\n        elements.push(tail);\n      },\n\n      /**\n       * add one more cell to snake elements\n       */\n      increase: function(pts) {\n        var tail = this.getElement(elements[0].x, elements[0].y);\n        switch(direction) {\n          case _UP:\n            tail.y += 1;\n            break;\n          case _DOWN:\n            tail.y -= 1;\n            break;\n          case _LEFT:\n            tail.x += 1;\n            break;\n          case _RIGHT:\n            tail.x -= 1;\n            break;\n        }\n\n        elements.unshift(tail);\n        this.pts += pts;\n      },\n\n      /**\n       * Checks if snake is out of border\n       * @return {Boolean}\n       */\n      isOverboard: function(coords) {\n        return coords.x < 0 || coords.x > this.cols-1 ||\n          coords.y < 0 || coords.y > this.rows-1;\n      },\n\n      /**\n       * Checks if snake is bitten by itself\n       * @return {Boolean}\n       */\n      isBitten: function(coords) {\n        if(this.godMode) {\n          return false;\n        }\n        for(var i = 0; i < elements.length; i++) {\n          if(elements[i].x === coords.x && elements[i].y === coords.y) {\n            return true;\n          }\n        }\n\n        return false;\n      },\n\n      /**\n       * detects if head has collision with objects\n       * calls a collisionWith function if collision detected\n       */\n      detectCollision: function(food) {\n        var head = elements[elements.length-1],\n            collision;\n\n        for(var i = 0; i < food.length; i++) {\n          /*check if head has collision with food*/\n          if(head.x === food[i].x && head.y === food[i].y) {\n            collision = food[i];\n            this.collisionWith(food[i], food);\n            break;\n          }\n        }\n\n        return collision || null;\n      },\n\n      /**\n       * desides what to do with collision depends on object\n       */\n      collisionWith: function(obj, apples) {\n        switch (obj.id) {\n          case _APPLE:\n          case _STRAWBERRY:\n          case _MUSHROOM:\n            this.godMode = false;\n            this.increase(obj.pts || 0);\n            break;\n          case _ELIXIR:\n            this.godMode = true;\n            break;\n          default:\n            this.gameOver = true;\n            console.log(\"collision with unknown object -> \", obj);\n        }\n\n        /*removes the eaten apple from Array*/\n        if(apples.indexOf(obj) >= 0) {\n          apples.splice(apples.indexOf(obj), 1);\n        }\n      }\n\n    }\n  })\n\n})();\n\n","(function() {\n\n  define(\"modules/objects/food/apple\", [], function() {\n    var img = new Image();\n    img.src = 'images/apple.png';\n\n    return {\n      id: 2,\n      pts: 1,\n      img: img,\n      type: \"apple\"\n    };\n  });\n\n})();\n\n","(function() {\n\n  define(\"modules/objects/food/strawberry\", [], function() {\n    var img = new Image();\n    img.src = 'images/strawberry.png';\n\n    return {\n      id: 3,\n      pts: 2,\n      img: img,\n      type: \"strawberry\"\n    }\n  });\n})();\n\n","(function() {\n\n  define(\"modules/objects/food/mushroom\", [], function() {\n    var img = new Image();\n    img.src = 'images/mushroom.png';\n\n    return {\n      id: 4,\n      pts: -1,\n      img: img,\n      type: \"mushroom\"\n    }\n  });\n})();\n\n","(function() {\n\n  define(\"modules/objects/food/elixir\", [], function() {\n    var img = new Image();\n    img.src = 'images/elixir.png';\n\n    return {\n      id: 5,\n      pts: 0,\n      img: img,\n      type: \"elixir\"\n    }\n  });\n})();\n\n","(function() {\n  define(\"modules/objects/food\",\n  [\n    \"modules/objects/food/apple\",\n    \"modules/objects/food/strawberry\",\n    \"modules/objects/food/mushroom\",\n    \"modules/objects/food/elixir\"\n  ],\n  function(apple, strawberry, mushroom, elixir) {\n    var elements = [],\n      /* what number of which sort of food will be generated */\n      params = {\n        apple:10,\n        strawberry: 3,\n        mushroom: 5,\n        elixir: 1\n      };\n\n    return {\n      tileSize: 0,\n\n      init: function(cols, rows, tileSize, num) {\n        elements = [];\n        this.tileSize = tileSize;\n        this.generateFood(cols, rows, num);\n      },\n\n      getId: function(ID) {\n        return ID;\n      },\n\n      getImage: function(type) {\n        var images = {\n              apple: apple,\n              strawberry: strawberry,\n              mushroom: mushroom,\n              elixir: elixir\n            },\n            obj = images[type] || apple;\n\n        return obj;\n      },\n\n      printItem: function(ctx, obj) {\n        ctx.drawImage(obj.img, obj.x*this.tileSize, obj.y*this.tileSize, this.tileSize, this.tileSize);\n      },\n\n      add: function(cols, rows, obj) {\n        var type = obj.type || \"apple\";\n        elements.push(this. getFood(cols, rows, type));\n      },\n\n      generateFood: function(cols, rows, num) {\n        var i;\n        /*loop every param*/\n        for(var name in params) {\n          /*generate food for each param in the object*/\n          for(i = 0; i < params[name]; i++) {\n            elements.push(this.getFood(cols, rows, name));\n          }\n        }\n      },\n\n      getFood: function(cols, rows, type) {\n        var obj = this.getImage(type);\n        return {\n          x: Math.floor(Math.random()*cols-1)+1,\n          y: Math.floor(Math.random()*rows-1)+1,\n          id: obj.id,\n          img: obj.img,\n          pts: obj.pts,\n          type: obj.type || \"\"\n        }\n      },\n\n      getElements: function() {\n        return elements;\n      }\n    }\n  });\n})();\n\n","/**\n * menu module for snake game\n * @author - Andrii Priadko\n */\n\n(function() {\n  define(\"modules/objects/menu\", [], function() {\n\n    return {\n      ctx: null, //canvas 2d context\n      cols: 0, //number of cols in game field\n      rows: 0, //number of rows in game field\n      tileSize: 0, //size of tile in the game field\n      width: 0, //game field width\n      height: 0, //game field height\n\n      /**\n       * Initialize a begining state\n       */\n      init: function(cols, rows, tileSize) {\n        this.cols = cols;\n        this.rows = rows;\n        this.tileSize = tileSize;\n        this.width = this.cols * this.tileSize;\n        this.height = this.rows * this.tileSize;\n      },\n\n      /**\n       * That function renders a gameover screen\n       *\n       */\n      gameOver: function(ctx, pts) {\n        var best = this.getBestScore() > pts ? this.getBestScore() : pts;\n\n        ctx.clearRect(0, 0, this.cols*this.tileSize, this.rows*this.tileSize);\n        ctx.font = \"bold 20px serif\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\"Game Over\", this.width/2, this.height/2-40);\n\n        ctx.font = \"16px serif\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\"press <Enter> to start a new game\", this.width/2, this.height/2-20);\n\n        ctx.font = \"16px serif\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\"your score is: \"+(pts || 0), this.width/2, this.height - 100);\n\n        ctx.font = \"16px serif\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\"the best score is: \" + best, this.width/2, this.height - 80);\n\n        this.setBestScore(best);\n      },\n\n      /**\n       * Gets a bestScore value from the localStorage\n       * @return {Number} - best score\n       */\n      getBestScore: function() {\n        return localStorage.getItem(\"bestScore\") || 0;\n      },\n\n      /**\n       * Store best score value to the localStorage\n       * @return {Boolean} - best score save result\n       */\n      setBestScore: function(pts) {\n        return localStorage.setItem(\"bestScore\", (pts || 0));\n      }\n    }\n  });\n})();\n\n","(function() {\n  define(\"modules/game\",\n  [\n    \"modules/objects/snake\",\n    \"modules/objects/food\",\n    \"modules/objects/menu\"\n  ],\n  function(snake, food, menu) {\n    var _TILE_SIZE = 20,\n      _COLS = 50,\n      _ROWS = 30,\n      _APPLES = 15,\n      /*keys*/\n      _ENTER = 13,\n      container, canvas, ctx;\n\n    return {\n      frame:0,\n      pts: 0,\n      /**\n       * initialize the game\n       */\n      init: function() {\n        snake.init(_COLS, _ROWS, _TILE_SIZE);\n        food.init(_COLS, _ROWS, _TILE_SIZE, _APPLES);\n        menu.init(_COLS, _ROWS, _TILE_SIZE);\n        this.boardInit(_COLS,_ROWS,_TILE_SIZE);\n        this.initEvents();\n        this.gameLoop();\n        this.render();\n      },\n\n      /**\n       * creates a new game world\n       */\n      boardInit: function(cols, rows, tileSize) {\n        container = document.getElementById(\"container\");\n        container.innerHTML=\"\"; //clear container\n\n        canvas = document.createElement(\"canvas\");\n        canvas.width = (cols || 40) * (tileSize || 10);\n        canvas.height = (rows || 30) * (tileSize || 10);\n\n        container.appendChild(canvas);\n        ctx = canvas.getContext('2d');\n      },\n\n      /**\n       * Initialize event listeners\n       * @listens keyup\n       */\n      initEvents: function() {\n        document.addEventListener(\"keyup\", function(e) {\n          switch(e.keyCode) {\n            case _ENTER:\n              if(snake.gameOver) {\n                this.init();\n              }\n              break;\n          }\n        }.bind(this));\n      },\n\n      /**\n       * Print lines between cells\n       */\n      printGrid: function(cols, rows, tileSize) {\n        for(var i = 1; i < rows; i++) {\n          ctx.beginPath();\n          ctx.moveTo(0,tileSize*i);\n          ctx.lineWidth = 0.05;\n          ctx.lineTo(cols*tileSize, tileSize*i);\n          ctx.closePath();\n          ctx.stroke();\n        }\n\n        for(var j = 1; j < cols; j++) {\n          ctx.beginPath();\n          ctx.moveTo(tileSize*j, 0);\n          ctx.lineWidth = 0.05;\n          ctx.lineTo(tileSize*j, rows*tileSize);\n          ctx.closePath();\n          ctx.stroke();\n        }\n      },\n\n      /**\n       * Prints one item\n       */\n      printItem: function(obj, tileSize) {\n        switch(obj.id) {\n          /*check if that is a snake cell*/\n          case snake.getId():\n            snake.printItem(ctx, obj);\n            break;\n          /*check if that is a food cell*/\n          case food.getId(obj.id):\n            food.printItem(ctx, obj);\n            break;\n          /*for unknown objects in case of something goes wrong*/\n          default:\n            ctx.fillStyle = \"grey\";\n            ctx.fillRect(obj.x*tileSize, obj.y*tileSize, tileSize, tileSize);\n        }\n      },\n\n      printPoints: function() {\n        ctx.fillStyle = \"grey\";\n        ctx.font = \"10px sans-serif\";\n        ctx.textAlign = \"right\";\n        ctx.fillText(\"score: \"+snake.pts, _COLS *_TILE_SIZE-5, 15);\n      },\n\n      /**\n       * render all elements\n       */\n      render: function() {\n        var snakeElements = snake.getElements(),\n            apples = food.getElements(),\n            elements = apples.concat(snakeElements),\n            collision = snake.detectCollision(apples);\n\n        ctx.clearRect(0,0,_COLS*_TILE_SIZE, _ROWS*_TILE_SIZE);\n\n        if(collision) {\n          food.add(_COLS, _ROWS, collision);\n        }\n\n        this.printGrid(_COLS, _ROWS, _TILE_SIZE);\n\n        for(var i = 0; i < elements.length; i++) {\n          this.printItem(elements[i], _TILE_SIZE);\n        }\n\n        this.printPoints();\n      },\n\n      gameLoop: function() {\n        var timer = setInterval(function() {\n          if(!snake.gameOver) {\n            snake.move();\n            this.render();\n          } else {\n            clearInterval(timer);\n            menu.gameOver(ctx, snake.pts);\n          }\n        }.bind(this), 1000/10);\n      }\n\n    }\n  });\n})();\n\n","(function() {\n\n  var version = 0.02;\n\n  requirejs.config({\n    urlArgs: \"v=\"+version\n  });\n\n  define(\"application\", [\"modules/game\"], function(game) {\n    game.init();\n  });\n\n})();\n\n"]}